#!/bin/sh
# File: git-pub

# Function to prompt for input
prompt() {
  local var_name=$1
  local prompt_text=$2
  local input
  while true; do
    # Use `readline` to enable navigation with arrow keys
    read -e -p "$prompt_text: " input
    if [ -n "$input" ]; then
      eval "$var_name=\"$input\""
      break
    else
      echo "Error: the field cannot be empty."
    fi
  done
}

# Function to prompt for optional input
prompt_optional() {
  local var_name=$1
  local prompt_text=$2
  local input
  # Use `readline` to enable navigation with arrow keys
  read -e -p "$prompt_text (Press enter to skip): " input
  eval "$var_name=\"$input\""
}

# Function to convert input to uppercase
to_uppercase() {
  echo "$1" | tr '[:lower:]' '[:upper:]'
}

# Prompt for the commit type
prompt COMMIT_TYPE "Enter the commit type (FIX, UPDATE, ADD, PARTIAL)"
COMMIT_TYPE=$(to_uppercase "$COMMIT_TYPE")

# Prompt for the task number (optional)
prompt_optional TASK_NUMBER "Enter the task number (if present)"

# Prompt for the commit title
prompt COMMIT_TITLE "Enter the commit title"

# Prompt for the commit body (optional)
prompt_optional COMMIT_BODY "Enter the commit body"

# Mapping of icons for each commit type
get_icon() {
  case $1 in
    FIX) echo "üîß";;
    UPDATE) echo "üîÑ";;
    ADD) echo "‚ûï";;
    PARTIAL) echo "‚ú≥Ô∏è";;
    *) echo "";  # Default empty if no match
  esac
}

ICON=$(get_icon "$COMMIT_TYPE")

# Execute git add and check the result
if ! git add .; then
  echo "Git add failed"
  exit 1
fi

# Execute git commit with the formatted message and check the result
if ! git commit -m "[$COMMIT_TYPE] $ICON | $TASK_NUMBER $COMMIT_TITLE" -m "$COMMIT_BODY"; then
  echo "Git commit failed"
  exit 1
fi

# Execute git push and check the result
if ! git push; then
  echo "Git push failed"
  exit 1
fi

echo "Push successful"
