#!/bin/sh
# File: git-staging

# Funzione per richiedere input con un prompt
prompt() {
  local var_name=$1
  local prompt_text=$2
  local input
  while true; do
    read -p "$prompt_text: " input
    if [ -n "$input" ]; then
      eval "$var_name=\"$input\""
      break
    else
      echo "Errore: il campo non pu√≤ essere vuoto."
    fi
  done
}

# Funzione per richiedere input opzionale
prompt_optional() {
  local var_name=$1
  local prompt_text=$2
  local input
  read -p "$prompt_text (Premi invio per saltare): " input
  eval "$var_name=\"$input\""
}

# Richiede la tipologia del commit
prompt COMMIT_TYPE "Inserisci la tipologia del commit (FIX, UPDATE, ADD, PARTIAL)"

# Richiede il numero della task (opzionale)
prompt_optional TASK_NUMBER "Inserisci il numero della task (se presente)"

# Richiede il titolo del commit
prompt COMMIT_TITLE "Inserisci il titolo del commit"

# Richiede il corpo del commit (opzionale)
prompt_optional COMMIT_BODY "Inserisci il corpo del commit"

# Mappa delle icone identificative per ogni tipologia di commit
get_icon() {
  case $1 in
    FIX) echo "üîß";;
    UPDATE) echo "üîÑ";;
    ADD) echo "‚ûï";;
    PARTIAL) echo "‚ú≥Ô∏è";;
    *) echo "";  # Default empty if no match
  esac
}

ICON=$(get_icon "$COMMIT_TYPE")

# Esegue yarn e controlla l'esito
if ! yarn; then
  echo "Yarn install failed"
  exit 1
fi

# Esegue yarn build e controlla l'esito
if ! yarn build; then
  echo "Yarn build failed"
  exit 1
fi
echo "Yarn build is okay!\n"

# Esegue git add e controlla l'esito
if ! git add .; then
  echo "Git add failed"
  exit 1
fi

# Esegue git commit con il messaggio formattato e controlla l'esito
if ! git commit -m "[$COMMIT_TYPE] $ICON | $TASK_NUMBER $COMMIT_TITLE" -m "$COMMIT_BODY" -m "STAGING"; then
  echo "Git commit failed"
  exit 1
fi

# Esegue git push e controlla l'esito
if ! git push; then
  echo "Git push failed"
  exit 1
fi

echo "Deploy successful"
